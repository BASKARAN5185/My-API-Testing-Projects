{
	"info": {
		"_postman_id": "fa467563-a47f-48f3-bd83-689a80820fa5",
		"name": "httpbin.org Api pratice",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24695592"
	},
	"item": [
		{
			"name": "Auth methods",
			"item": [
				{
					"name": "HTTP Basic Auth.",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "baskaran",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://httpbin.org/basic-auth/baskaran/123",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"basic-auth",
								"baskaran",
								"123"
							]
						},
						"description": "Generated from cURL: curl -X GET \"https://httpbin.org/basic-auth/undefined/undefined\" -H \"accept: application/json\""
					},
					"response": []
				},
				{
					"name": "digest-auth",
					"request": {
						"auth": {
							"type": "digest",
							"digest": [
								{
									"key": "password",
									"value": "123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "baskaran",
									"type": "string"
								},
								{
									"key": "qop",
									"value": "1231vfddfgg",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "MD5",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://httpbin.org/digest-auth/1231vfddfgg/baskaran/123",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"digest-auth",
								"1231vfddfgg",
								"baskaran",
								"123"
							]
						},
						"description": "Generated from cURL: curl -X GET \"https://httpbin.org/digest-auth/1231vfddfgg/baskaran/123\" -H \"accept: application/json\""
					},
					"response": []
				},
				{
					"name": "bearer authentication.",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "bjdcuhdcuhwuihuihddw",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "bjdcuhdcuhwuihuihddw"
							}
						],
						"url": {
							"raw": "https://httpbin.org/bearer",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"bearer"
							]
						},
						"description": "Generated from cURL: curl -X GET \"https://httpbin.org/bearer\" -H \"accept: application/json\" -H \"Authorization: bjdcuhdcuhwuihuihddw\""
					},
					"response": []
				},
				{
					"name": "Digest Auth + Algorithm.",
					"request": {
						"auth": {
							"type": "digest",
							"digest": [
								{
									"key": "algorithm",
									"value": "SHA-256",
									"type": "string"
								},
								{
									"key": "qop",
									"value": "/123jbcjdbcjh",
									"type": "string"
								},
								{
									"key": "password",
									"value": "123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "baskaran",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://httpbin.org/digest-auth/123jbcjdbcjh/baskaran/123/SHA-256",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"digest-auth",
								"123jbcjdbcjh",
								"baskaran",
								"123",
								"SHA-256"
							]
						},
						"description": "Generated from cURL: curl -X GET \"https://httpbin.org/digest-auth/123jbcjdbcjh/baskaran/123/MD5\" -H \"accept: application/json\""
					},
					"response": []
				},
				{
					"name": "Digest Auth + Algorithm.",
					"request": {
						"auth": {
							"type": "digest",
							"digest": [
								{
									"key": "nonce",
									"value": "never",
									"type": "string"
								},
								{
									"key": "algorithm",
									"value": "MD5",
									"type": "string"
								},
								{
									"key": "qop",
									"value": "/123jbcjdbcjh",
									"type": "string"
								},
								{
									"key": "password",
									"value": "123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "baskaran",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "https://httpbin.org/digest-auth/fgdfg/baskaran/123/MD5/never",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"digest-auth",
								"fgdfg",
								"baskaran",
								"123",
								"MD5",
								"never"
							]
						},
						"description": "Generated from cURL: curl -X GET \"https://httpbin.org/digest-auth/fgdfg/baskaran/123/MD5/never\" -H \"accept: application/json\""
					},
					"response": []
				},
				{
					"name": "hidden-basic-auth",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"try {\r",
									"    const response = await pm.sendRequest({\r",
									"        url: \"https://httpbin.org/hidden-basic-auth/baskaran/123\",\r",
									"        method: \"GET\"\r",
									"    });\r",
									"\r",
									"    console.log(response.json());\r",
									"} catch (err) {\r",
									"    console.error(err);\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"baskaran\");\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "123",
									"type": "string"
								},
								{
									"key": "username",
									"value": "baskaran",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://httpbin.org/hidden-basic-auth/baskaran/123",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"hidden-basic-auth",
								"baskaran",
								"123"
							]
						},
						"description": "Generated from cURL: curl -X GET \"https://httpbin.org/hidden-basic-auth/baskaran/123\" -H \"accept: application/json\""
					},
					"response": []
				}
			]
		},
		{
			"name": "Testing different HTTP verbs",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"httpbin.org\");\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/delete",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"https://httpbin.org\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/patch",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"patch"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"empty\");\r",
									"});\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/post",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"httpbin.org\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"application/json\");\r",
									"});\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/put",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"put"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Status codes",
			"item": [
				{
					"name": "New Request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"INTERNAL SERVER ERROR\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"codes\": 500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://httpbin.org/status/500",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"status",
								"500"
							]
						}
					},
					"response": []
				},
				{
					"name": "New Request Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"INTERNAL SERVER ERROR\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"codes\": 500\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://httpbin.org/status/500",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"status",
								"500"
							]
						}
					},
					"response": []
				},
				{
					"name": "request",
					"request": {
						"method": "DELETE",
						"header": []
					},
					"response": []
				},
				{
					"name": "request Copy",
					"request": {
						"method": "DELETE",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "Request inspection",
			"item": [
				{
					"name": "Response inspection",
					"item": []
				},
				{
					"name": "Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 304\", function () {\r",
									"    pm.response.to.have.status(304);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"NOT MODIFIED\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "If-Modified-Since",
								"value": "FF",
								"type": "text"
							},
							{
								"key": "If-None-Match",
								"value": "Zab",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://httpbin.org/cache",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"cache"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sets a Cache-Control header for n seconds. Parameters",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://httpbin.org/cache/",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"cache",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "If-None-Match",
								"value": "bas",
								"type": "text"
							},
							{
								"key": "If-Match",
								"value": "bas",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://httpbin.org/etag/{etag}",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"etag",
								"{etag}"
							]
						}
					},
					"response": []
				},
				{
					"name": "412 PRECONDITION FAILED The server doesn't meet the criteria set in request header.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Returns a set of response headers from the query string.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"freeform\",\"Request\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "freeform",
								"value": "Request",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://httpbin.org/response-headers?freeform=Request",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"response-headers"
							],
							"query": [
								{
									"key": "freeform",
									"value": "Request"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "match the cache 200",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/etag/{etag}?If-None-Match=bas&If-Match=bas",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"etag",
								"{etag}"
							],
							"query": [
								{
									"key": "If-None-Match",
									"value": "bas"
								},
								{
									"key": "If-Match",
									"value": "bas"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a set of response headers from the query string.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"call\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "freeform",
								"value": "Call",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://httpbin.org/response-headers?freeform=call",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"response-headers"
							],
							"query": [
								{
									"key": "freeform",
									"value": "call"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Response formats",
			"item": [
				{
					"name": "Returns Brotli-encoded data.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Encoding\",\"br\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/brotli",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"brotli"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns Deflate-encoded data.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"true\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Encoding\",\"deflate\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/deflate",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"deflate"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns page denied by robots.txt rules.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\",\"text/plain\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/deny",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"deny"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a UTF-8 encoded body",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/encoding/utf8",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"encoding",
								"utf8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns GZip-encoded data.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/gzip",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"gzip"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a simple HTML document.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Herman Melville - Moby-Dick\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/html",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"html"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a simple JSON document.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/json",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns some robots.txt rules.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/robots.txt",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"robots.txt"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a simple XML document.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"description": "StartFragmentReturns responses in different data formatsEndFragment"
		},
		{
			"name": "Dynamic data",
			"item": [
				{
					"name": "Decodes base64url-encoded string.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/base64/SFRUUEJJTiBpcyBhd2Vzb21l",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"base64",
								"SFRUUEJJTiBpcyBhd2Vzb21l"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns n random bytes generated with given seed",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Returns a delayed response (max of 10 seconds).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/delay/20",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"delay",
								"20"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a delayed response (max of 10 seconds).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Internal Server Error\");\r",
									" });   \r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"INTERNAL SERVER ERROR\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/delay/undefined",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"delay",
								"undefined"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a delayed response (max of 10 seconds).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/delay/5",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"delay",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a delayed response (max of 10 seconds).",
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/delay/5",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"delay",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a delayed response (max of 10 seconds).",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/delay/5",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"delay",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Returns a delayed response (max of 10 seconds).",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/delay/5",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"delay",
								"5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Drips data over a duration after an optional initial delay.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Length\",\"100\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/delay/5?duration=5&numbytes=100&code=400&delay=2",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"delay",
								"5"
							],
							"query": [
								{
									"key": "duration",
									"value": "5"
								},
								{
									"key": "numbytes",
									"value": "100"
								},
								{
									"key": "code",
									"value": "400"
								},
								{
									"key": "delay",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate a page containing n links to other pages which do the same",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Links\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/links/5/20",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"links",
								"5",
								"20"
							]
						}
					},
					"response": []
				},
				{
					"name": "Streams n random bytes generated with given seed, at given chunk size per packet.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Streams n random bytes generated with given seed, at given chunk size per packet.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Stream n JSON responses",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Return a UUID4.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"uuid\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/uuid",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"uuid"
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragmentGenerates random and dynamic dataEndFragment"
		},
		{
			"name": "Cookies",
			"item": [
				{
					"name": "Sets cookie(s) as provided by the query string and redirects to cookie list.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Sets a cookie and redirects to cookie list.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Returns cookie data.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Deletes cookie(s) as provided by the query string and redirects to cookie list.",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/cookies/delete?freeform=data&ragu=123",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"cookies",
								"delete"
							],
							"query": [
								{
									"key": "freeform",
									"value": "data"
								},
								{
									"key": "ragu",
									"value": "123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletes cookie(s) as provided by the query string and redirects to cookie list. Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/cookies/delete?ragu=123",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"cookies",
								"delete"
							],
							"query": [
								{
									"key": "ragu",
									"value": "123"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragmentCreates, reads and deletes CookiesEndFragment"
		},
		{
			"name": "images",
			"item": [
				{
					"name": "Returns a simple image of the type suggest by the Accept header.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Returns a simple JPEG image.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Returns a simple PNG image.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Returns a simple SVG image.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Returns a simple WEBP image.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			],
			"description": "StartFragmentReturns different image formatsEndFragment"
		},
		{
			"name": "Redirect",
			"item": [
				{
					"name": "Absolutely 302 Redirects n times.",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "302/3XX Redirects to the given URL.",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/redirect-to?url=https://httpbin.org",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"redirect-to"
							],
							"query": [
								{
									"key": "url",
									"value": "https://httpbin.org"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "302/3XX Redirects to the given URL.",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://httpbin.org/redirect-to?url=https://httpbin.org/&status_code=301",
							"protocol": "https",
							"host": [
								"httpbin",
								"org"
							],
							"path": [
								"redirect-to"
							],
							"query": [
								{
									"key": "url",
									"value": "https://httpbin.org/"
								},
								{
									"key": "status_code",
									"value": "301"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "StartFragmentReturns different redirect responsesEndFragment"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}