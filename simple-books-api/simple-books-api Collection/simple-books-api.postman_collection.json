{
	"info": {
		"_postman_id": "2ce11b1d-efb2-470b-8a40-461b6cba15ef",
		"name": "simple-books-api",
		"description": "Books Sample Api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24695592"
	},
	"item": [
		{
			"name": "simple-books-api",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get the List of books",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"verify the response body Books ID\",function(){\r",
							"    var jasondata=pm.response.json()\r",
							"    pm.expect(jasondata.id).to.eql(3);\r",
							"    pm.expect(jasondata.name(2)).to.eql(\"The Vanishing Half\");\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://simple-books-api.glitch.me/books",
					"protocol": "https",
					"host": [
						"simple-books-api",
						"glitch",
						"me"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a single book",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Verify the status code\",function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Verify the book ID and name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.equal(4);\r",
							"    pm.expect(jsonData.name).to.eql(\"The Midnight Library\");\r",
							"    pm.expect(jsonData.type).to.eql(\"fiction\");\r",
							"    pm.expect(jsonData.available).to.eql(true);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{book}}/books/4",
					"host": [
						"{{book}}"
					],
					"path": [
						"books",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "Status code 409 - \"API client already registered.\" Try changing the values for clientEmail and clientName to something else.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Postman\",\r\n   \"clientEmail\": \"valentin@example.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{book}}/api-clients/?",
					"host": [
						"{{book}}"
					],
					"path": [
						"api-clients",
						""
					],
					"query": [
						{
							"key": "",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "API Authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Save accessToken to environment variable\", function () {\r",
							"    pm.collectionVariables.set(\"accessToken\", pm.response.json().accessToken);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"The Boys\",\r\n   \"clientEmail\": \"naukrialer@naukri.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{book}}/api-clients/",
					"host": [
						"{{book}}"
					],
					"path": [
						"api-clients",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Submit an order  Allows you to submit a new order. Requires authentication.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body has order details\", function () {\r",
							"    pm.response.to.have.jsonBody(\"created\");\r",
							"    pm.response.to.have.jsonBody(\"orderId\");\r",
							"    \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bookToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookId\": 3,\r\n  \"customerName\": \"jaya\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{book}}/orders",
					"host": [
						"{{book}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all orders : Allows you to view all orders. Requires authentication",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Validate the PUT request for creating an order\r",
							"pm.test(\"Order creation successful\", function () {\r",
							"    pm.expect(pm.response.json()).to.deep.include({\r",
							"        \"id\": \"YuJblyL-T1_KgUUlv4NXK\",\r",
							"        \"bookId\": 3,\r",
							"        \"customerName\": \"jaya\",\r",
							"        \"createdBy\": \"b94d82cd3b914858b0f0d889db3b4a5062d08e02442e247a094f3fea3256e348\",\r",
							"        \"quantity\": 1,\r",
							"        \"timestamp\": 1737721198767\r",
							"    });\r",
							"});\r",
							"\r",
							"// Validate the GET request for retrieving orders\r",
							"pm.test(\"Orders retrieved successfully\", function () {\r",
							"    pm.expect(pm.response.json()).to.eql([\r",
							"        {\r",
							"            \"id\": \"YuJblyL-T1_KgUUlv4NXK\",\r",
							"            \"bookId\": 3,\r",
							"            \"customerName\": \"jaya\",\r",
							"            \"createdBy\": \"b94d82cd3b914858b0f0d889db3b4a5062d08e02442e247a094f3fea3256e348\",\r",
							"            \"quantity\": 1,\r",
							"            \"timestamp\": 1737721198767\r",
							"        },\r",
							"        {\r",
							"            \"id\": \"liVvtc3F_97tgS5XByBE-\",\r",
							"            \"bookId\": 3,\r",
							"            \"customerName\": \"jaya\",\r",
							"            \"createdBy\": \"b94d82cd3b914858b0f0d889db3b4a5062d08e02442e247a094f3fea3256e348\",\r",
							"            \"quantity\": 1,\r",
							"            \"timestamp\": 1737721259467\r",
							"        }\r",
							"    ]);\r",
							"});\r",
							"pm.test(\"Validate id, bookId, and customerName\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (order) {\r",
							"        pm.expect(order.id).to.be.a('string');\r",
							"        pm.expect(order.bookId).to.equal(3);\r",
							"        pm.expect(order.customerName).to.equal('jaya');\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bookToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{book}}/orders",
					"host": [
						"{{book}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an order : Allows you to view an existing order. Requires authentication.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate id, bookId, and customerName\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.a('string');\r",
							"    pm.expect(jsonData.bookId).to.equal(3);\r",
							"    pm.expect(jsonData.customerName).to.equal('jaya');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate specific order ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.equal(\"YuJblyL-T1_KgUUlv4NXK\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bookToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{book}}/orders/{{OrderID}}",
					"host": [
						"{{book}}"
					],
					"path": [
						"orders",
						"{{OrderID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update an order : Update an existing order. Requires authentication.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate id, bookId, and customerName\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.equal(\"YuJblyL-T1_KgUUlv4NXK\");\r",
							"    pm.expect(jsonData.bookId).to.equal(3);\r",
							"    pm.expect(jsonData.customerName).to.equal(\"Jaya Lakasmi\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bookToken}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Lakasmi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{book}}/orders/YuJblyL-T1_KgUUlv4NXK",
					"host": [
						"{{book}}"
					],
					"path": [
						"orders",
						"YuJblyL-T1_KgUUlv4NXK"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an order DELETE : Delete an existing order. Requires authentication.",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate id, bookId, and customerName\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.equal(\"YuJblyL-T1_KgUUlv4NXK\");\r",
							"    pm.expect(jsonData.bookId).to.equal(3);\r",
							"    pm.expect(jsonData.customerName).to.equal(\"Jaya Lakasmi\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{bookToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"customerName\": \"Lakasmi\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{book}}/orders/YuJblyL-T1_KgUUlv4NXK",
					"host": [
						"{{book}}"
					],
					"path": [
						"orders",
						"YuJblyL-T1_KgUUlv4NXK"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "book",
			"value": "https://simple-books-api.glitch.me",
			"type": "string"
		},
		{
			"key": "bookToken",
			"value": "597411097a794bf54478ceba7c7715fb192f34194db69b279fbcfd44d92ca5eb"
		},
		{
			"key": "OrderID",
			"value": "YuJblyL-T1_KgUUlv4NXK",
			"type": "string"
		}
	]
}