{
  "collection": {
    "_": {
      "postman_id": "64226d59-8a78-47ea-aa88-bd1c663594b0",
      "exporter_id": "24695592"
    },
    "item": [
      {
        "id": "74dc9edb-dec2-4c49-978f-c2a982fd8d4a",
        "name": "Status code 200 : The request was successful, and the server returned the expected response.",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "posts",
              "1"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f9c7cf44-01a4-48fd-9bc7-ac496632be88",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {\r",
                "    pm.response.to.have.status(200);\r",
                "});\r",
                "// Ensure the response code text is as expected\r",
                "pm.test(\"Verify response code text\", function () {\r",
                "    pm.expect(pm.response.status).to.be.oneOf(['OK']);\r",
                "});\r",
                "pm.test(\"Verify response body content\", function () {\r",
                "    pm.expect(pm.response.text()).to.include(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
                "    pm.expect(pm.response.text()).to.include(\"quia et suscipit\");\r",
                "    pm.expect(pm.response.text()).to.include(\"suscipit recusandae consequuntur expedita et cum\");\r",
                "    pm.expect(pm.response.text()).to.include(\"reprehenderit molestiae ut ut quas totam\");\r",
                "    pm.expect(pm.response.text()).to.include(\"nostrum rerum est autem sunt rem eveniet architecto\");\r",
                "});\r",
                "pm.test(\"Verify response body has userId and id\", function () {\r",
                "   pm.response.to.have.jsonBody(\"id\",1);\r",
                "   pm.response.to.have.jsonBody(\"userId\",1);\r",
                "   \r",
                "});"
              ],
              "_lastExecutionId": "15e9a952-ac2e-4cc4-9adc-08a90c609859"
            }
          }
        ]
      },
      {
        "id": "96b2a4f0-77f7-45d7-b3fc-98287bc88c88",
        "name": "Status code 201 :The request has been fulfilled, and a new resource was created",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "posts"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "027a00e5-3da7-42a2-9d4d-f77107263bae",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 201\", function () {\r",
                "    pm.response.to.have.status(201);\r",
                "});\r",
                "// Ensure the response code text is as expected\r",
                "pm.test(\"Verify response code text\", function () {\r",
                "    pm.expect(pm.response.status).to.be.oneOf(['Created']);\r",
                "});\r",
                "pm.test(\"Verify the body id response\", function () {\r",
                "    pm.response.to.have.jsonBody(\"id\", 101);\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "3636315d-cc33-4c8b-b22d-3a657530d8aa"
            }
          }
        ]
      },
      {
        "id": "75ad2cca-57d3-432b-a21b-0a69b29692c0",
        "name": "Status code 204 :The request was successful, but there is no content to return",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "posts",
              "1"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "45722dce-c5a2-4b88-abed-03ec228044ac",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Verify the response code 204 \",function(){\r",
                "    pm.response.to.have.status(204)\r",
                "})\r",
                "pm.test(\"Verify the response body text\",function(){\r",
                "    pm.expect(pm.response.status).to.be.oneOf(['No content']);\r",
                "})"
              ],
              "_lastExecutionId": "fa65846e-2c6b-4540-928f-afc3e98ae350"
            }
          }
        ]
      },
      {
        "id": "b8240815-f371-4aef-96c2-22cad6ef47d6",
        "name": "404 Bad Request  Meaning: Requested resource could not be found.",
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "posts",
              "abc"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "d875e796-628a-4529-a38d-b53757de86fb",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Verify the status code 404\",function(){\r",
                "\r",
                "    pm.response.to.have.status(404);\r",
                "})\r",
                "pm.test(\"Status code name has string\", function () {\r",
                "    pm.response.to.have.status(\"Not Found\");\r",
                "});\r",
                ""
              ],
              "_lastExecutionId": "3a951fab-701b-471b-a9bb-9397efee2de7"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "42feef78-9442-44ae-890f-9ba31222f0e0",
              "type": "text/javascript",
              "packages": {},
              "_lastExecutionId": "a74400c3-dbcc-45eb-a36f-ec8f337828e1"
            }
          }
        ]
      },
      {
        "id": "95df803a-8a5e-489d-86de-9d72ba29e829",
        "name": "401 Unauthorised Meaning: Authentication is required, and the user is not authenticated.",
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": []
      },
      {
        "id": "adeb61d0-ebc7-41b9-ad37-59669d94d50e",
        "name": "403 Forbidden  Meaning: The request is valid, but the server refuses to authorize it.",
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": []
      }
    ],
    "event": [],
    "variable": [],
    "info": {
      "_postman_id": "64226d59-8a78-47ea-aa88-bd1c663594b0",
      "name": "jsonplaceholder Api Testing",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "6631618f-fb29-475b-872e-257bd5e41c09",
    "values": []
  },
  "globals": {
    "id": "19ea8504-73bd-4fac-8380-39ff51e926ed",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 5,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 6,
        "pending": 0,
        "failed": 2
      },
      "tests": {
        "total": 6,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 11,
        "pending": 0,
        "failed": 2
      },
      "testScripts": {
        "total": 4,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 471,
      "responseMin": 257,
      "responseMax": 781,
      "responseSd": 191.75635582686695,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1744804730164,
      "completed": 1744804732722
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 6,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "ea8ed7ae-59e3-43bc-b228-a8f2456bcd86",
          "httpRequestId": "e30f3d63-4a9c-494c-933d-66e654d0a94c"
        },
        "item": {
          "id": "74dc9edb-dec2-4c49-978f-c2a982fd8d4a",
          "name": "Status code 200 : The request was successful, and the server returned the expected response.",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "posts",
                "1"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f9c7cf44-01a4-48fd-9bc7-ac496632be88",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "// Ensure the response code text is as expected\r",
                  "pm.test(\"Verify response code text\", function () {\r",
                  "    pm.expect(pm.response.status).to.be.oneOf(['OK']);\r",
                  "});\r",
                  "pm.test(\"Verify response body content\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
                  "    pm.expect(pm.response.text()).to.include(\"quia et suscipit\");\r",
                  "    pm.expect(pm.response.text()).to.include(\"suscipit recusandae consequuntur expedita et cum\");\r",
                  "    pm.expect(pm.response.text()).to.include(\"reprehenderit molestiae ut ut quas totam\");\r",
                  "    pm.expect(pm.response.text()).to.include(\"nostrum rerum est autem sunt rem eveniet architecto\");\r",
                  "});\r",
                  "pm.test(\"Verify response body has userId and id\", function () {\r",
                  "   pm.response.to.have.jsonBody(\"id\",1);\r",
                  "   pm.response.to.have.jsonBody(\"userId\",1);\r",
                  "   \r",
                  "});"
                ],
                "_lastExecutionId": "15e9a952-ac2e-4cc4-9adc-08a90c609859"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "posts",
              "1"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0853a30f-b0be-4dee-b84b-c78f41f357d2",
              "system": true
            },
            {
              "key": "Host",
              "value": "jsonplaceholder.typicode.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d82bee8e-0764-4c0e-a99b-c5ec5202458d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 16 Apr 2025 11:58:52 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1744440408&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=k8aiAA0aFEbtv9aYE6p4JmG2FdZ82B7dNBmi1actDac%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1744440408&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=k8aiAA0aFEbtv9aYE6p4JmG2FdZ82B7dNBmi1actDac%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "X-Ratelimit-Limit",
              "value": "1000"
            },
            {
              "key": "X-Ratelimit-Remaining",
              "value": "999"
            },
            {
              "key": "X-Ratelimit-Reset",
              "value": "1744440457"
            },
            {
              "key": "Vary",
              "value": "Origin, Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=43200"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Etag",
              "value": "W/\"124-yiKdLzqO5gfBrJFrcdJ8Yq0LGnU\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "Cf-Cache-Status",
              "value": "HIT"
            },
            {
              "key": "Age",
              "value": "4122"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "CF-RAY",
              "value": "93138367288c0b27-LHR"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              117,
              115,
              101,
              114,
              73,
              100,
              34,
              58,
              32,
              49,
              44,
              10,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              44,
              10,
              32,
              32,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              32,
              34,
              115,
              117,
              110,
              116,
              32,
              97,
              117,
              116,
              32,
              102,
              97,
              99,
              101,
              114,
              101,
              32,
              114,
              101,
              112,
              101,
              108,
              108,
              97,
              116,
              32,
              112,
              114,
              111,
              118,
              105,
              100,
              101,
              110,
              116,
              32,
              111,
              99,
              99,
              97,
              101,
              99,
              97,
              116,
              105,
              32,
              101,
              120,
              99,
              101,
              112,
              116,
              117,
              114,
              105,
              32,
              111,
              112,
              116,
              105,
              111,
              32,
              114,
              101,
              112,
              114,
              101,
              104,
              101,
              110,
              100,
              101,
              114,
              105,
              116,
              34,
              44,
              10,
              32,
              32,
              34,
              98,
              111,
              100,
              121,
              34,
              58,
              32,
              34,
              113,
              117,
              105,
              97,
              32,
              101,
              116,
              32,
              115,
              117,
              115,
              99,
              105,
              112,
              105,
              116,
              92,
              110,
              115,
              117,
              115,
              99,
              105,
              112,
              105,
              116,
              32,
              114,
              101,
              99,
              117,
              115,
              97,
              110,
              100,
              97,
              101,
              32,
              99,
              111,
              110,
              115,
              101,
              113,
              117,
              117,
              110,
              116,
              117,
              114,
              32,
              101,
              120,
              112,
              101,
              100,
              105,
              116,
              97,
              32,
              101,
              116,
              32,
              99,
              117,
              109,
              92,
              110,
              114,
              101,
              112,
              114,
              101,
              104,
              101,
              110,
              100,
              101,
              114,
              105,
              116,
              32,
              109,
              111,
              108,
              101,
              115,
              116,
              105,
              97,
              101,
              32,
              117,
              116,
              32,
              117,
              116,
              32,
              113,
              117,
              97,
              115,
              32,
              116,
              111,
              116,
              97,
              109,
              92,
              110,
              110,
              111,
              115,
              116,
              114,
              117,
              109,
              32,
              114,
              101,
              114,
              117,
              109,
              32,
              101,
              115,
              116,
              32,
              97,
              117,
              116,
              101,
              109,
              32,
              115,
              117,
              110,
              116,
              32,
              114,
              101,
              109,
              32,
              101,
              118,
              101,
              110,
              105,
              101,
              116,
              32,
              97,
              114,
              99,
              104,
              105,
              116,
              101,
              99,
              116,
              111,
              34,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 781,
          "responseSize": 292
        },
        "id": "74dc9edb-dec2-4c49-978f-c2a982fd8d4a",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Verify response code text",
            "skipped": false
          },
          {
            "assertion": "Verify response body content",
            "skipped": false
          },
          {
            "assertion": "Verify response body has userId and id",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f7313eb4-7383-4757-8b56-1dac1b5f6d00",
          "length": 6,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "68d3c47c-f057-4ae1-a559-2ffeaa7ef7c5"
        },
        "item": {
          "id": "96b2a4f0-77f7-45d7-b3fc-98287bc88c88",
          "name": "Status code 201 :The request has been fulfilled, and a new resource was created",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "posts"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "027a00e5-3da7-42a2-9d4d-f77107263bae",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 201\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "// Ensure the response code text is as expected\r",
                  "pm.test(\"Verify response code text\", function () {\r",
                  "    pm.expect(pm.response.status).to.be.oneOf(['Created']);\r",
                  "});\r",
                  "pm.test(\"Verify the body id response\", function () {\r",
                  "    pm.response.to.have.jsonBody(\"id\", 101);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3636315d-cc33-4c8b-b22d-3a657530d8aa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "posts"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8c6bc7db-0f54-4c70-90da-fc2fc4683f0c",
              "system": true
            },
            {
              "key": "Host",
              "value": "jsonplaceholder.typicode.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST"
        },
        "response": {
          "id": "2fbda32d-8ccb-403a-8609-468b7d386801",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 16 Apr 2025 11:58:52 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "15"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1744804732&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=m2mpHrFqLGfXUjYL64X8MuCpRtPgVAtZhytmMxUCcB4%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1744804732&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=m2mpHrFqLGfXUjYL64X8MuCpRtPgVAtZhytmMxUCcB4%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "X-Ratelimit-Limit",
              "value": "1000"
            },
            {
              "key": "X-Ratelimit-Remaining",
              "value": "999"
            },
            {
              "key": "X-Ratelimit-Reset",
              "value": "1744804791"
            },
            {
              "key": "Vary",
              "value": "Origin, X-HTTP-Method-Override, Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "Access-Control-Expose-Headers",
              "value": "Location"
            },
            {
              "key": "Location",
              "value": "https://jsonplaceholder.typicode.com/posts/101"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Etag",
              "value": "W/\"f-4jjw4Y8q22Yv1PV9m28FczJgjzk\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "Cf-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "CF-RAY",
              "value": "93138369ae710b27-LHR"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              10,
              32,
              32,
              34,
              105,
              100,
              34,
              58,
              32,
              49,
              48,
              49,
              10,
              125
            ]
          },
          "cookie": [],
          "responseTime": 257,
          "responseSize": 15
        },
        "id": "96b2a4f0-77f7-45d7-b3fc-98287bc88c88",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          },
          {
            "assertion": "Verify response code text",
            "skipped": false
          },
          {
            "assertion": "Verify the body id response",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "eb5a2c14-13ee-4a8f-a292-345f3024baa1",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8048c6f9-dc06-424a-9fb4-f9b0f31bed80"
        },
        "item": {
          "id": "75ad2cca-57d3-432b-a21b-0a69b29692c0",
          "name": "Status code 204 :The request was successful, but there is no content to return",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "posts",
                "1"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45722dce-c5a2-4b88-abed-03ec228044ac",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify the response code 204 \",function(){\r",
                  "    pm.response.to.have.status(204)\r",
                  "})\r",
                  "pm.test(\"Verify the response body text\",function(){\r",
                  "    pm.expect(pm.response.status).to.be.oneOf(['No content']);\r",
                  "})"
                ],
                "_lastExecutionId": "fa65846e-2c6b-4540-928f-afc3e98ae350"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "posts",
              "1"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dd07da41-6c2b-4d6e-909f-02697384fae9",
              "system": true
            },
            {
              "key": "Host",
              "value": "jsonplaceholder.typicode.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "c6b48dcd-6bfb-4e4c-8832-9ae27c10c1b3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 16 Apr 2025 11:58:53 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1744804732&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=m2mpHrFqLGfXUjYL64X8MuCpRtPgVAtZhytmMxUCcB4%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1744804732&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=m2mpHrFqLGfXUjYL64X8MuCpRtPgVAtZhytmMxUCcB4%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "X-Ratelimit-Limit",
              "value": "1000"
            },
            {
              "key": "X-Ratelimit-Remaining",
              "value": "998"
            },
            {
              "key": "X-Ratelimit-Reset",
              "value": "1744804791"
            },
            {
              "key": "Vary",
              "value": "Origin, Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Cache-Control",
              "value": "no-cache"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Etag",
              "value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "Cf-Cache-Status",
              "value": "DYNAMIC"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "CF-RAY",
              "value": "9313836beb5e0b27-LHR"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              125
            ]
          },
          "cookie": [],
          "responseTime": 406,
          "responseSize": 2
        },
        "id": "75ad2cca-57d3-432b-a21b-0a69b29692c0",
        "assertions": [
          {
            "assertion": "Verify the response code 204 ",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Verify the response code 204 ",
              "message": "expected response to have status code 204 but got 200",
              "stack": "AssertionError: expected response to have status code 204 but got 200\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Verify the response body text",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Verify the response body text",
              "message": "expected 'OK' to be one of [ 'No content' ]",
              "stack": "AssertionError: expected 'OK' to be one of [ 'No content' ]\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "24cea798-66a1-4f54-89d6-62c67eaa5a42",
          "length": 6,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e8564df0-c225-4c59-b2ec-e33cccadd1eb"
        },
        "item": {
          "id": "b8240815-f371-4aef-96c2-22cad6ef47d6",
          "name": "404 Bad Request  Meaning: Requested resource could not be found.",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "posts",
                "abc"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d875e796-628a-4529-a38d-b53757de86fb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify the status code 404\",function(){\r",
                  "\r",
                  "    pm.response.to.have.status(404);\r",
                  "})\r",
                  "pm.test(\"Status code name has string\", function () {\r",
                  "    pm.response.to.have.status(\"Not Found\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3a951fab-701b-471b-a9bb-9397efee2de7"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "42feef78-9442-44ae-890f-9ba31222f0e0",
                "type": "text/javascript",
                "packages": {},
                "_lastExecutionId": "a74400c3-dbcc-45eb-a36f-ec8f337828e1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "posts",
              "abc"
            ],
            "host": [
              "jsonplaceholder",
              "typicode",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "84cdef65-8e8b-4355-8881-996547fa2ce4",
              "system": true
            },
            {
              "key": "Host",
              "value": "jsonplaceholder.typicode.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a962210b-e660-422d-99e4-1d364878a07a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "Date",
              "value": "Wed, 16 Apr 2025 11:58:53 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Transfer-Encoding",
              "value": "chunked"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Server",
              "value": "cloudflare"
            },
            {
              "key": "Report-To",
              "value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1744804733&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=9FUTlfwUBDJRRmi68QHcqAMsIui6%2B%2B6mcqIl5ds7KKw%3D\"}]}"
            },
            {
              "key": "Reporting-Endpoints",
              "value": "heroku-nel=https://nel.heroku.com/reports?ts=1744804733&sid=e11707d5-02a7-43ef-b45e-2cf4d2036f7d&s=9FUTlfwUBDJRRmi68QHcqAMsIui6%2B%2B6mcqIl5ds7KKw%3D"
            },
            {
              "key": "Nel",
              "value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
            },
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "X-Ratelimit-Limit",
              "value": "1000"
            },
            {
              "key": "X-Ratelimit-Remaining",
              "value": "997"
            },
            {
              "key": "X-Ratelimit-Reset",
              "value": "1744804791"
            },
            {
              "key": "Vary",
              "value": "Origin, Accept-Encoding"
            },
            {
              "key": "Access-Control-Allow-Credentials",
              "value": "true"
            },
            {
              "key": "Cache-Control",
              "value": "max-age=43200"
            },
            {
              "key": "Pragma",
              "value": "no-cache"
            },
            {
              "key": "Expires",
              "value": "-1"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Etag",
              "value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
            },
            {
              "key": "Via",
              "value": "1.1 vegur"
            },
            {
              "key": "Cf-Cache-Status",
              "value": "MISS"
            },
            {
              "key": "Content-Encoding",
              "value": "br"
            },
            {
              "key": "CF-RAY",
              "value": "9313836f6b0c0b27-LHR"
            },
            {
              "key": "alt-svc",
              "value": "h3=\":443\"; ma=86400"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              125
            ]
          },
          "cookie": [],
          "responseTime": 440,
          "responseSize": 2
        },
        "id": "b8240815-f371-4aef-96c2-22cad6ef47d6",
        "assertions": [
          {
            "assertion": "Verify the status code 404",
            "skipped": false
          },
          {
            "assertion": "Status code name has string",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "01cc3140-2471-4c6b-b3d1-1208dbe75791",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "70e13b1e-67ac-4030-9e6c-23e1e30950b2"
        },
        "item": {
          "id": "95df803a-8a5e-489d-86de-9d72ba29e829",
          "name": "401 Unauthorised Meaning: Authentication is required, and the user is not authenticated.",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "id": "95df803a-8a5e-489d-86de-9d72ba29e829",
        "requestError": {}
      },
      {
        "cursor": {
          "ref": "7e69deff-1691-4caf-b041-07385b2cbd50",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cd9d0cf3-652d-4d8c-bb14-6ccd0d1a343c"
        },
        "item": {
          "id": "adeb61d0-ebc7-41b9-ad37-59669d94d50e",
          "name": "403 Forbidden  Meaning: The request is valid, but the server refuses to authorize it.",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "id": "adeb61d0-ebc7-41b9-ad37-59669d94d50e",
        "requestError": {}
      }
    ],
    "transfers": {
      "responseTotal": 311
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Verify the response code 204 ",
          "message": "expected response to have status code 204 but got 200",
          "stack": "AssertionError: expected response to have status code 204 but got 200\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "647e9088ab5b7eb184f3cfc6e8268f30",
          "id": "535a3dd2-3f7d-46f8-b402-abe01f121a3a",
          "timestamp": 1744804732017,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "75ad2cca-57d3-432b-a21b-0a69b29692c0",
          "name": "Status code 204 :The request was successful, but there is no content to return",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "posts",
                "1"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45722dce-c5a2-4b88-abed-03ec228044ac",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify the response code 204 \",function(){\r",
                  "    pm.response.to.have.status(204)\r",
                  "})\r",
                  "pm.test(\"Verify the response body text\",function(){\r",
                  "    pm.expect(pm.response.status).to.be.oneOf(['No content']);\r",
                  "})"
                ],
                "_lastExecutionId": "fa65846e-2c6b-4540-928f-afc3e98ae350"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "64226d59-8a78-47ea-aa88-bd1c663594b0",
            "exporter_id": "24695592"
          },
          "item": [
            {
              "id": "74dc9edb-dec2-4c49-978f-c2a982fd8d4a",
              "name": "Status code 200 : The request was successful, and the server returned the expected response.",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "posts",
                    "1"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c7cf44-01a4-48fd-9bc7-ac496632be88",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "// Ensure the response code text is as expected\r",
                      "pm.test(\"Verify response code text\", function () {\r",
                      "    pm.expect(pm.response.status).to.be.oneOf(['OK']);\r",
                      "});\r",
                      "pm.test(\"Verify response body content\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"quia et suscipit\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"suscipit recusandae consequuntur expedita et cum\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"reprehenderit molestiae ut ut quas totam\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"nostrum rerum est autem sunt rem eveniet architecto\");\r",
                      "});\r",
                      "pm.test(\"Verify response body has userId and id\", function () {\r",
                      "   pm.response.to.have.jsonBody(\"id\",1);\r",
                      "   pm.response.to.have.jsonBody(\"userId\",1);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "15e9a952-ac2e-4cc4-9adc-08a90c609859"
                  }
                }
              ]
            },
            {
              "id": "96b2a4f0-77f7-45d7-b3fc-98287bc88c88",
              "name": "Status code 201 :The request has been fulfilled, and a new resource was created",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "posts"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "027a00e5-3da7-42a2-9d4d-f77107263bae",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "// Ensure the response code text is as expected\r",
                      "pm.test(\"Verify response code text\", function () {\r",
                      "    pm.expect(pm.response.status).to.be.oneOf(['Created']);\r",
                      "});\r",
                      "pm.test(\"Verify the body id response\", function () {\r",
                      "    pm.response.to.have.jsonBody(\"id\", 101);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3636315d-cc33-4c8b-b22d-3a657530d8aa"
                  }
                }
              ]
            },
            {
              "id": "75ad2cca-57d3-432b-a21b-0a69b29692c0",
              "name": "Status code 204 :The request was successful, but there is no content to return",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "posts",
                    "1"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45722dce-c5a2-4b88-abed-03ec228044ac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify the response code 204 \",function(){\r",
                      "    pm.response.to.have.status(204)\r",
                      "})\r",
                      "pm.test(\"Verify the response body text\",function(){\r",
                      "    pm.expect(pm.response.status).to.be.oneOf(['No content']);\r",
                      "})"
                    ],
                    "_lastExecutionId": "fa65846e-2c6b-4540-928f-afc3e98ae350"
                  }
                }
              ]
            },
            {
              "id": "b8240815-f371-4aef-96c2-22cad6ef47d6",
              "name": "404 Bad Request  Meaning: Requested resource could not be found.",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "posts",
                    "abc"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d875e796-628a-4529-a38d-b53757de86fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify the status code 404\",function(){\r",
                      "\r",
                      "    pm.response.to.have.status(404);\r",
                      "})\r",
                      "pm.test(\"Status code name has string\", function () {\r",
                      "    pm.response.to.have.status(\"Not Found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3a951fab-701b-471b-a9bb-9397efee2de7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42feef78-9442-44ae-890f-9ba31222f0e0",
                    "type": "text/javascript",
                    "packages": {},
                    "_lastExecutionId": "a74400c3-dbcc-45eb-a36f-ec8f337828e1"
                  }
                }
              ]
            },
            {
              "id": "95df803a-8a5e-489d-86de-9d72ba29e829",
              "name": "401 Unauthorised Meaning: Authentication is required, and the user is not authenticated.",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "adeb61d0-ebc7-41b9-ad37-59669d94d50e",
              "name": "403 Forbidden  Meaning: The request is valid, but the server refuses to authorize it.",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "64226d59-8a78-47ea-aa88-bd1c663594b0",
            "name": "jsonplaceholder Api Testing",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "eb5a2c14-13ee-4a8f-a292-345f3024baa1",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8048c6f9-dc06-424a-9fb4-f9b0f31bed80",
          "scriptId": "45722dce-c5a2-4b88-abed-03ec228044ac",
          "execution": "fa65846e-2c6b-4540-928f-afc3e98ae350"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Verify the response body text",
          "message": "expected 'OK' to be one of [ 'No content' ]",
          "stack": "AssertionError: expected 'OK' to be one of [ 'No content' ]\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "3893f81a3e5f31112c84f24b8764360b",
          "id": "837f9191-81d2-4e71-a64f-3848fcecc4f3",
          "timestamp": 1744804732032,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "75ad2cca-57d3-432b-a21b-0a69b29692c0",
          "name": "Status code 204 :The request was successful, but there is no content to return",
          "request": {
            "url": {
              "protocol": "https",
              "path": [
                "posts",
                "1"
              ],
              "host": [
                "jsonplaceholder",
                "typicode",
                "com"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "45722dce-c5a2-4b88-abed-03ec228044ac",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify the response code 204 \",function(){\r",
                  "    pm.response.to.have.status(204)\r",
                  "})\r",
                  "pm.test(\"Verify the response body text\",function(){\r",
                  "    pm.expect(pm.response.status).to.be.oneOf(['No content']);\r",
                  "})"
                ],
                "_lastExecutionId": "fa65846e-2c6b-4540-928f-afc3e98ae350"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "64226d59-8a78-47ea-aa88-bd1c663594b0",
            "exporter_id": "24695592"
          },
          "item": [
            {
              "id": "74dc9edb-dec2-4c49-978f-c2a982fd8d4a",
              "name": "Status code 200 : The request was successful, and the server returned the expected response.",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "posts",
                    "1"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f9c7cf44-01a4-48fd-9bc7-ac496632be88",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "// Ensure the response code text is as expected\r",
                      "pm.test(\"Verify response code text\", function () {\r",
                      "    pm.expect(pm.response.status).to.be.oneOf(['OK']);\r",
                      "});\r",
                      "pm.test(\"Verify response body content\", function () {\r",
                      "    pm.expect(pm.response.text()).to.include(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"quia et suscipit\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"suscipit recusandae consequuntur expedita et cum\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"reprehenderit molestiae ut ut quas totam\");\r",
                      "    pm.expect(pm.response.text()).to.include(\"nostrum rerum est autem sunt rem eveniet architecto\");\r",
                      "});\r",
                      "pm.test(\"Verify response body has userId and id\", function () {\r",
                      "   pm.response.to.have.jsonBody(\"id\",1);\r",
                      "   pm.response.to.have.jsonBody(\"userId\",1);\r",
                      "   \r",
                      "});"
                    ],
                    "_lastExecutionId": "15e9a952-ac2e-4cc4-9adc-08a90c609859"
                  }
                }
              ]
            },
            {
              "id": "96b2a4f0-77f7-45d7-b3fc-98287bc88c88",
              "name": "Status code 201 :The request has been fulfilled, and a new resource was created",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "posts"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "027a00e5-3da7-42a2-9d4d-f77107263bae",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 201\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "// Ensure the response code text is as expected\r",
                      "pm.test(\"Verify response code text\", function () {\r",
                      "    pm.expect(pm.response.status).to.be.oneOf(['Created']);\r",
                      "});\r",
                      "pm.test(\"Verify the body id response\", function () {\r",
                      "    pm.response.to.have.jsonBody(\"id\", 101);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3636315d-cc33-4c8b-b22d-3a657530d8aa"
                  }
                }
              ]
            },
            {
              "id": "75ad2cca-57d3-432b-a21b-0a69b29692c0",
              "name": "Status code 204 :The request was successful, but there is no content to return",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "posts",
                    "1"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "45722dce-c5a2-4b88-abed-03ec228044ac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify the response code 204 \",function(){\r",
                      "    pm.response.to.have.status(204)\r",
                      "})\r",
                      "pm.test(\"Verify the response body text\",function(){\r",
                      "    pm.expect(pm.response.status).to.be.oneOf(['No content']);\r",
                      "})"
                    ],
                    "_lastExecutionId": "fa65846e-2c6b-4540-928f-afc3e98ae350"
                  }
                }
              ]
            },
            {
              "id": "b8240815-f371-4aef-96c2-22cad6ef47d6",
              "name": "404 Bad Request  Meaning: Requested resource could not be found.",
              "request": {
                "url": {
                  "protocol": "https",
                  "path": [
                    "posts",
                    "abc"
                  ],
                  "host": [
                    "jsonplaceholder",
                    "typicode",
                    "com"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d875e796-628a-4529-a38d-b53757de86fb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Verify the status code 404\",function(){\r",
                      "\r",
                      "    pm.response.to.have.status(404);\r",
                      "})\r",
                      "pm.test(\"Status code name has string\", function () {\r",
                      "    pm.response.to.have.status(\"Not Found\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3a951fab-701b-471b-a9bb-9397efee2de7"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "42feef78-9442-44ae-890f-9ba31222f0e0",
                    "type": "text/javascript",
                    "packages": {},
                    "_lastExecutionId": "a74400c3-dbcc-45eb-a36f-ec8f337828e1"
                  }
                }
              ]
            },
            {
              "id": "95df803a-8a5e-489d-86de-9d72ba29e829",
              "name": "401 Unauthorised Meaning: Authentication is required, and the user is not authenticated.",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            },
            {
              "id": "adeb61d0-ebc7-41b9-ad37-59669d94d50e",
              "name": "403 Forbidden  Meaning: The request is valid, but the server refuses to authorize it.",
              "request": {
                "url": {
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": []
            }
          ],
          "event": [],
          "variable": [],
          "info": {
            "_postman_id": "64226d59-8a78-47ea-aa88-bd1c663594b0",
            "name": "jsonplaceholder Api Testing",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "eb5a2c14-13ee-4a8f-a292-345f3024baa1",
          "length": 6,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "8048c6f9-dc06-424a-9fb4-f9b0f31bed80",
          "scriptId": "45722dce-c5a2-4b88-abed-03ec228044ac",
          "execution": "fa65846e-2c6b-4540-928f-afc3e98ae350"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "fad581ced7c256fd679f7d094a654ff9",
          "id": "b5000709-ee1d-4a24-807a-836054823d79",
          "timestamp": 1744804732643,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "95df803a-8a5e-489d-86de-9d72ba29e829",
          "name": "401 Unauthorised Meaning: Authentication is required, and the user is not authenticated.",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "01cc3140-2471-4c6b-b3d1-1208dbe75791",
          "length": 6,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "70e13b1e-67ac-4030-9e6c-23e1e30950b2"
        }
      },
      {
        "error": {
          "name": "Error",
          "message": "runtime:extensions~request: request url is empty",
          "stack": "Error: runtime:extensions~request: request url is empty\n    at Requester.request (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:421:26)\n    at C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:156:37\n    at Requester.create (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js:508:16)\n    at RequesterPool.create (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js:67:22)\n    at C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js:105:32\n    at C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:252:13\n    at wrapper (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:273:20)\n    at replenish (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:443:29)\n    at C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:453:13\n    at eachOfLimit (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:479:36)\n    at awaitable (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at eachOfSeries (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:815:16)\n    at awaitable (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)\n    at _asyncMap (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:245:16)\n    at mapSeries (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:839:16)\n    at awaitable (C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js:212:32)",
          "checksum": "fad581ced7c256fd679f7d094a654ff9",
          "id": "08fa8c69-229c-4b44-bf22-e1e4a38537d2",
          "timestamp": 1744804732678,
          "stacktrace": [
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 421,
              "functionName": "Requester.request",
              "typeName": "Requester",
              "methodName": "request",
              "columnNumber": 26,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 156,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 37,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester.js",
              "lineNumber": 508,
              "functionName": "Requester.create",
              "typeName": "Requester",
              "methodName": "create",
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\requester\\requester-pool.js",
              "lineNumber": 67,
              "functionName": "RequesterPool.create",
              "typeName": "RequesterPool",
              "methodName": "create",
              "columnNumber": 22,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\postman-runtime\\lib\\runner\\extensions\\http-request.command.js",
              "lineNumber": 105,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 252,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 273,
              "functionName": "wrapper",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 20,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 443,
              "functionName": "replenish",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 29,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 453,
              "functionName": null,
              "typeName": null,
              "methodName": null,
              "columnNumber": 13,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 479,
              "functionName": "eachOfLimit",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 36,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 815,
              "functionName": "eachOfSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 245,
              "functionName": "_asyncMap",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 839,
              "functionName": "mapSeries",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 16,
              "native": false
            },
            {
              "fileName": "C:\\Users\\xmedia\\AppData\\Roaming\\npm\\node_modules\\newman\\node_modules\\async\\dist\\async.js",
              "lineNumber": 212,
              "functionName": "awaitable",
              "typeName": "Object",
              "methodName": null,
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "adeb61d0-ebc7-41b9-ad37-59669d94d50e",
          "name": "403 Forbidden  Meaning: The request is valid, but the server refuses to authorize it.",
          "request": {
            "url": {
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": []
        },
        "cursor": {
          "ref": "7e69deff-1691-4caf-b041-07385b2cbd50",
          "length": 6,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cd9d0cf3-652d-4d8c-bb14-6ccd0d1a343c"
        }
      }
    ],
    "error": null
  }
}